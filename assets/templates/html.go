// Code generated by go-bindata.
// sources:
// www/templates/html/things.html
// www/templates/html/things.html~
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwTemplatesHtmlThingsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x3d\x8f\xdb\x30\x0c\x9d\xe3\x5f\xc1\x72\x4f\xb4\xb7\xb2\x81\xa2\xed\xdc\x0e\xb7\x74\xa4\x2d\xe6\xac\x83\x2c\xb9\x12\x9d\xab\x11\xdc\x7f\x2f\x64\x39\x89\x83\xa2\xbd\x68\xd1\xd7\xe3\x7b\xd4\x23\x75\x3e\x83\xe1\xa3\xf5\x0c\x28\xbd\xf5\xcf\x09\xe1\xed\xad\xd2\x1f\xbe\x7e\xff\xf2\xf4\xf3\xc7\x37\xe8\x65\x70\x4d\xa5\xf3\x04\x8e\xfc\x73\x8d\xec\xb1\xa9\x00\x74\xcf\x64\xf2\x22\x0f\x2d\x56\x1c\x37\x4f\x0b\x83\x56\x65\x57\x5d\x2e\x53\x17\xed\x28\x90\x62\x57\xa3\x7a\xa1\x13\x95\x03\x55\x04\x0f\xa3\xa3\x8e\xfb\xe0\x0c\xc7\x43\xe7\x2c\x7b\x39\xbc\x24\x6c\xb4\x2a\xb0\xe6\x41\x1a\x1a\xed\x7d\x1c\x6c\xc6\x83\x1c\xd6\xdb\xbf\xc5\xb5\xba\x3c\x55\xb7\xc1\xcc\xb7\x77\x19\x7b\x82\xce\x51\x4a\x35\x76\xc1\x0b\x59\xcf\x11\xef\x65\xab\xdd\x3d\x2e\x86\x57\x04\x6b\x6a\xfc\x35\x71\x9c\xb1\xc9\xf7\x0b\x70\x9d\xf5\x31\xc4\xa1\xa9\x76\x39\xcc\xfa\x71\x12\x90\x79\xe4\x1a\x85\x7f\x0b\x82\xa7\x81\x6b\x5c\xfc\x2a\x2c\xeb\xf2\x44\x6e\xe2\x1a\x11\x36\x56\xd6\xd8\xf5\x21\x24\x06\x82\x15\xa5\xae\x6a\x5a\xad\x32\x37\x71\xad\x8c\x3d\x35\xff\xce\x37\x72\x9a\x9c\xa4\x92\xf1\x7b\xe0\xc5\xcd\x7d\xd6\x40\x48\x32\x3b\xae\xd1\xd8\x34\x3a\x9a\x3f\xfa\xe0\xf9\x13\x96\xd8\x52\x91\x91\xfc\x26\xc8\x51\xcb\x6e\xf1\x7f\x24\xff\x5f\x7b\xb2\x25\x14\x99\x56\x57\x4a\x78\x2e\xd0\x36\x87\xb2\x37\x24\xb4\x7f\xed\x43\x0a\xfe\x68\x63\x92\x7d\x06\x64\x91\x0b\xc7\x4a\xd9\x4e\x22\x61\x9b\x4d\x9a\xda\xc1\x0a\xae\x45\xb8\xec\xd6\xe7\xb6\xe2\xa1\x15\xbf\x1f\xa3\x1d\x28\x17\xf3\xb3\x31\x5a\x15\x8e\x07\xac\xde\xdd\xba\xb2\x1c\x5c\x3b\x55\xab\xd2\x67\x5a\x95\xdf\x77\x3e\x03\x7b\x93\xff\xe5\x9f\x00\x00\x00\xff\xff\x18\x33\x32\xfd\xae\x03\x00\x00")

func wwwTemplatesHtmlThingsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlThingsHtml,
		"www/templates/html/things.html",
	)
}

func wwwTemplatesHtmlThingsHtml() (*asset, error) {
	bytes, err := wwwTemplatesHtmlThingsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/things.html", size: 942, mode: os.FileMode(420), modTime: time.Unix(1580073230, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwTemplatesHtmlThingsHtml2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xbd\x6e\xc3\x30\x0c\x84\xe7\xfa\x29\x58\x2d\xdd\xac\x17\x60\xb4\xf4\x67\x4d\x87\x02\x45\xa7\x40\x95\x98\x5a\x80\x44\x15\x16\x11\xb4\x10\xfc\xee\x05\xe3\x18\xc8\x14\xf4\x16\x13\x87\xf3\x7d\x14\x7b\x87\x48\xc7\xc4\x04\x26\x71\xa4\x1f\x03\xcb\x32\xe0\xfd\xd3\xfe\xf1\xed\xe3\xf5\x19\x26\x29\xd9\x0d\xa8\x1f\xc8\x9e\xbf\x76\x86\xd8\xb8\x01\x00\x27\xf2\x51\x07\x15\x4a\x92\x4c\xee\x7d\xaa\x0f\x0d\xf6\x0c\x2f\x69\x6e\x82\x76\x75\x2f\x99\xde\x85\xca\x77\xf6\x72\x26\x85\x43\xa8\xa5\x54\x3e\x14\x12\x6f\x96\xe5\x76\x28\xb4\xa6\x19\xc5\xda\x8d\x8b\x9f\x35\xfe\xba\x61\xdb\x20\xa6\x13\x84\xec\x5b\xdb\x99\x50\x59\x7c\x62\x9a\x8d\x83\x2b\xdd\x46\x68\x2d\xcd\x06\x46\xe5\xdc\x01\x60\xf1\x89\x9d\x4e\xaa\x71\x1c\xcf\xa6\x5d\xdd\xff\x14\x1e\x6b\x95\xad\xf0\xb2\xa3\x8d\xe9\x74\xf5\x33\xda\xf5\x09\x68\xd7\x2b\xf7\x0e\xc4\x51\xef\xff\x17\x00\x00\xff\xff\xe0\x53\x6d\xb7\x95\x01\x00\x00")

func wwwTemplatesHtmlThingsHtml2Bytes() ([]byte, error) {
	return bindataRead(
		_wwwTemplatesHtmlThingsHtml2,
		"www/templates/html/things.html~",
	)
}

func wwwTemplatesHtmlThingsHtml2() (*asset, error) {
	bytes, err := wwwTemplatesHtmlThingsHtml2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "www/templates/html/things.html~", size: 405, mode: os.FileMode(420), modTime: time.Unix(1576865520, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"www/templates/html/things.html": wwwTemplatesHtmlThingsHtml,
	"www/templates/html/things.html~": wwwTemplatesHtmlThingsHtml2,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"www": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"html": &bintree{nil, map[string]*bintree{
				"things.html": &bintree{wwwTemplatesHtmlThingsHtml, map[string]*bintree{}},
				"things.html~": &bintree{wwwTemplatesHtmlThingsHtml2, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

